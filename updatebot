#!/usr/bin/env python
# 
# Copyright (c) 2017 Matt Behrens.
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import configparser
import datetime
import getpass
import os
import random
import sys

import mastodon
import pytz

def read_config():
    config = configparser.ConfigParser()
    if len(sys.argv) > 1:
        config.read(sys.argv[1])
    else:
        config.read('updatebot.ini')
    return config

def register(config):
    clientcred_file = os.path.expanduser(config['client']['clientcred_file'])

    mastodon.Mastodon.create_app(config['client']['client_name'],
            api_base_url=config['client']['api_base_url'],
            to_file=clientcred_file)

def login(config):
    email = input('Email: ')
    password = getpass.getpass('Password: ')

    clientcred_file = os.path.expanduser(config['client']['clientcred_file'])
    usercred_file = os.path.expanduser(config['client']['usercred_file'])

    client = mastodon.Mastodon(client_id=clientcred_file, api_base_url=config['client']['api_base_url'])
    client.log_in(email, password, to_file=usercred_file)

def get_local_hour(config):
    timezone_name = config['updates']['timezone']
    timezone = pytz.timezone(timezone_name)
    now = datetime.datetime.now(timezone)
    return now.hour

def select_adverb(config):
    with open(os.path.expanduser(config['updates']['adverbs_file'])) as f:
        adverbs = [adverb.strip() for adverb in f.readlines()]

    return random.choice(adverbs)

def get_feeling(config):
    return config['updates']['feeling']

def select_preamble(timeframe, local_hour):
    with open(os.path.expanduser(config['updates']['{}_preambles_file'.format(timeframe)])) as f:
        preambles = [preamble.strip() for preamble in f.readlines()]

    return random.choice(preambles).format(hour=local_hour)

def format_post(preamble, adverb, feeling):
    return '{} {} {}.'.format(preamble, adverb, feeling)

def toot(config, post):
    client = mastodon.Mastodon(client_id=clientcred_file,
            access_token=usercred_file,
            api_base_url=config['client']['api_base_url'])
    client.toot(post)

config = read_config()

if not 'DEBUG' in os.environ:
    clientcred_file = os.path.expanduser(config['client']['clientcred_file'])
    usercred_file = os.path.expanduser(config['client']['usercred_file'])

    if not os.path.exists(clientcred_file):
        register(config)

    if not os.path.exists(usercred_file):
        login(config)

local_hour = get_local_hour(config)
adverb = select_adverb(config)
feeling = get_feeling(config)

if local_hour == config['updates'].getint('morning_hour'):
    preamble = select_preamble('morning', local_hour)
elif local_hour == config['updates'].getint('evening_hour'):
    preamble = select_preamble('evening', local_hour)
else:
    preamble = None

if preamble:
    post = format_post(preamble, adverb, feeling)
    if 'DEBUG' in os.environ:
        print('would toot: {}'.format(post))
    else:
        toot(config, post)
